import argparse
import requests
from termcolor import colored
import os

print(colored("""
> Bulk Git Vulnerability Checker
> By : Allen Gerysena
""","yellow"))

print(""" 
-----------------------------------

B)bbbb     G)gggg V)    vv   C)ccc  
B)   bb   G)      V)    vv  C)   cc 
B)bbbb   G)  ggg  V)    vv C)       
B)   bb  G)    gg  V)  vv  C)       
B)    bb  G)   gg   V)vv    C)   cc 
B)bbbbb    G)ggg     V)      C)ccc  
                                    
-----------------------------------
""")

print(colored("Checking... \n","yellow"))

def check_subdomain(url, timeout=5):
    # Add protocol if missing
    if not url.startswith("http://") and not url.startswith("https://"):
        url = "https://" + url

    # Check for /.git/HEAD and "ref:" in response body
    try:
        response = requests.get(url + "/.git/HEAD", timeout=timeout)
        if response.status_code == 200 and response.text.startswith("ref:"):
            print(colored(url + " is vulnerable!", "green"))
            return
    except requests.exceptions.RequestException:
        pass

    # Try http if https fails
    try:
        url = "http://" + url.split("//")[-1]
        response = requests.get(url + "/.git/HEAD", timeout=timeout)
        if response.status_code == 200 and response.text.startswith("ref:"):
            print(colored(url + " is vulnerable!", "green"))
    except requests.exceptions.RequestException:
        pass

    # Print progress
    print(url)

def main():
    # Parse command line arguments
    parser = argparse.ArgumentParser()
    parser.add_argument("-f", "--file", required=True, help="path to file containing list of subdomains")
    parser.add_argument("-t", "--timeout", type=int, default=5, help="timeout in seconds (default: 5)")
    args = parser.parse_args()

    try:
        # Read subdomains from file and check each one
        with open(args.file, "r") as f:
            for line in f:
                subdomain = line.strip()
                check_subdomain(subdomain, args.timeout)
    except KeyboardInterrupt:
        print(colored(" [!] Interrupted", "red"))

if __name__ == "__main__":
    main()
